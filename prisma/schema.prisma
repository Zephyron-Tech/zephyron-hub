// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// Data models
// ==========================================

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Microsoft OAuth fields
  microsoftAccessToken  String?   @db.Text
  microsoftRefreshToken String?   @db.Text
  microsoftTokenExpiry  DateTime?
  
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]    @relation("TaskAssignee")
  expenses      Expense[]
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String? // Otazník znamená, že pole je volitelné
  createdAt   DateTime @default(now()) @map("created_at")

  // Relace: Projekt má mnoho úkolů
  tasks Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      String   @default("backlog") // 'backlog', 'todo', 'inprogress', 'done'
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int     @map("project_id")

  assignee   User? @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId Int?  @map("assignee_id")
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Decimal
  description String
  category    String
  expenseDate DateTime @map("expense_date")
  receiptUrl  String?  @map("receipt_url")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relace s uživatelem (každý výdaj zadal jeden uživatel)
  author   User @relation(fields: [authorId], references: [id])
  authorId Int  @map("author_id")
}

model Revenue {
  id           Int      @id @default(autoincrement())
  amount       Decimal
  description  String
  revenueDate  DateTime @map("revenue_date")
  createdAt    DateTime @default(now()) @map("created_at")
}